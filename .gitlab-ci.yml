# @author: rahul
image: node:6.12.0

stages:
  - lint
  - build
  - release
  - review
  - deploy
  # - pre-production

variables:
  CONTAINER_IMAGE: ${CI_REGISTRY_IMAGE}/${CI_BUILD_REF_NAME}:${CI_BUILD_REF}
  CONTAINER_IMAGE_LATEST: ${CI_REGISTRY_IMAGE}/${CI_BUILD_REF_NAME}:latest
  CONTAINER_IMAGE_UNTAGGED: ${CI_REGISTRY_IMAGE}/${CI_BUILD_REF_NAME}
  DOCKER_DRIVER: overlay2

  KUBECONFIG: /etc/deploy/config
  # STAGING_NAMESPACE: app-stage
  # PRODUCTION_NAMESPACE: app-prod
  #
  # APP_PATH: /go/src/gitlab.example.com/librerio/libr_files
  # POSTGRES_USER: gorma
  # POSTGRES_DB: test-${CI_BUILD_REF}
  # POSTGRES_PASSWORD: gorma

# before_script:

cache:
  paths:
    - node_modules/
    - build/

lint:
  stage: lint
  script:
    - npm install -g yarn
    - yarn install
    - yarn run lint
  only:
    - development
    - qa
    - uat
    - sso/development
    - sso/qa
    - spica/development
    - spica/qa

build:
  stage: build
  artifacts:
    paths:
      - node_modules/
      - build/
  script:
    - npm install -g yarn
    - yarn install
    - yarn run build -- --release
  only:
    - development
    - qa
    - uat
    - sso/development
    - sso/qa
    - spica/development
    - spica/qa

release:
  stage: release
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - docker info
  script:
    # - export DOCKER_HOST=tcp://localhost:2375
    - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}
    - docker build -t ${CONTAINER_IMAGE} .
    - docker tag ${CONTAINER_IMAGE} ${CONTAINER_IMAGE_LATEST}
    - docker push ${CONTAINER_IMAGE}
    - docker push ${CONTAINER_IMAGE_LATEST}
  only:
    - development
    - qa
    - uat
    - sso/development
    - sso/qa
    - spica/development
    - spica/qa

    # - /^f-.*$/

deploy-dev:
  stage: deploy
  image: arbaz7/gcloud-kubectl-helm:latest
  services:
    - docker:dind
  before_script:
    - mkdir -p /etc/deploy
    - echo ${kube_config} > kube_config
    - base64 -d kube_config > ${KUBECONFIG}
    - echo ${gcloud_auth} > gcloud_auth.base64
    - base64 -d gcloud_auth.base64 > gcloud_auth.json
    # - kubectl config use-context gke_egnify-product_us-central1-a_hydra-federation
    - helm init --client-only
    - helm repo update
    - gcloud auth activate-service-account --key-file=gcloud_auth.json
    - gcloud container clusters get-credentials hydra-federation-dev --zone asia-south1-a --project egnify-product
  script:
    - export NAMESPACE=dev;
    - export RELEASE_NAME=sso-${NAMESPACE}-hydra
    - export DEPLOYS=$(helm ls | grep $RELEASE_NAME | wc -l)
    - if [ ${DEPLOYS}  -eq 0 ]; then helm install --name=${RELEASE_NAME} charts --set image.tag=${CI_BUILD_REF} -f charts/values/${NAMESPACE}.yaml --namespace=${NAMESPACE}; else helm upgrade ${RELEASE_NAME} charts --set image.tag=${CI_BUILD_REF} -f charts/values/${NAMESPACE}.yaml --namespace=${NAMESPACE}; fi
  environment:
    name: dev
  only:
    - development

deploy-sso-dev:
  stage: deploy
  image: arbaz7/gcloud-kubectl-helm:latest
  services:
    - docker:dind
  before_script:
    - mkdir -p /etc/deploy
    - echo ${kube_config} > kube_config
    - base64 -d kube_config > ${KUBECONFIG}
    - echo ${gcloud_auth} > gcloud_auth.base64
    - base64 -d gcloud_auth.base64 > gcloud_auth.json
    # - kubectl config use-context gke_egnify-product_us-central1-a_hydra-federation
    - helm init --client-only
    - helm repo update
    - gcloud auth activate-service-account --key-file=gcloud_auth.json
    - gcloud container clusters get-credentials hydra-federation-dev --zone asia-south1-a --project egnify-product
  script:
    - export NAMESPACE=dev;
    - export RELEASE_NAME=sso-${NAMESPACE}-sso
    - export DEPLOYS=$(helm ls | grep $RELEASE_NAME | wc -l)
    - if [ ${DEPLOYS}  -eq 0 ]; then helm install --name=${RELEASE_NAME} charts --set image.tag=${CI_BUILD_REF} -f charts/values/sso/${NAMESPACE}.yaml --namespace=${NAMESPACE}; else helm upgrade ${RELEASE_NAME} charts --set image.tag=${CI_BUILD_REF} -f charts/values/sso/${NAMESPACE}.yaml --namespace=${NAMESPACE}; fi
  environment:
    name: sso-dev
  only:
    - sso/development

deploy-qa:
  stage: deploy
  image: arbaz7/gcloud-kubectl-helm:latest
  services:
    - docker:dind
  before_script:
    - mkdir -p /etc/deploy
    - echo ${kube_config} > kube_config
    - base64 -d kube_config > ${KUBECONFIG}
    - echo ${gcloud_auth} > gcloud_auth.base64
    - base64 -d gcloud_auth.base64 > gcloud_auth.json
    # - kubectl config use-context gke_egnify-product_us-central1-a_hydra-federation
    - helm init --client-only
    - gcloud auth activate-service-account --key-file=gcloud_auth.json
    - helm repo update
    - gcloud container clusters get-credentials hydra-federation-dev --zone asia-south1-a --project egnify-product
  script:
    - export NAMESPACE=qa;
    - export RELEASE_NAME=sso-${NAMESPACE}-hydra
    - export DEPLOYS=$(helm ls | grep $RELEASE_NAME | wc -l)
    - if [ ${DEPLOYS}  -eq 0 ]; then helm install --name=${RELEASE_NAME} charts --set image.tag=${CI_BUILD_REF} -f charts/values/${NAMESPACE}.yaml --namespace=${NAMESPACE}; else helm upgrade ${RELEASE_NAME} charts --set image.tag=${CI_BUILD_REF} -f charts/values/${NAMESPACE}.yaml --namespace=${NAMESPACE}; fi
  environment:
    name: qa
    # url: https://qa.hydra.egnify.io
  only:
    - qa

deploy-qa:
  stage: deploy
  image: arbaz7/gcloud-kubectl-helm:latest
  services:
    - docker:dind
  before_script:
    - mkdir -p /etc/deploy
    - echo ${kube_config} > kube_config
    - base64 -d kube_config > ${KUBECONFIG}
    - echo ${gcloud_auth} > gcloud_auth.base64
    - base64 -d gcloud_auth.base64 > gcloud_auth.json
    # - kubectl config use-context gke_egnify-product_us-central1-a_hydra-federation
    - helm init --client-only
    - gcloud auth activate-service-account --key-file=gcloud_auth.json
    - helm repo update
    - gcloud container clusters get-credentials hydra-federation-dev --zone asia-south1-a --project egnify-product
  script:
    - export NAMESPACE=qa;
    - export RELEASE_NAME=sso-${NAMESPACE}-sso
    - export DEPLOYS=$(helm ls | grep $RELEASE_NAME | wc -l)
    - if [ ${DEPLOYS}  -eq 0 ]; then helm install --name=${RELEASE_NAME} charts --set image.tag=${CI_BUILD_REF} -f charts/values/sso/${NAMESPACE}.yaml --namespace=${NAMESPACE}; else helm upgrade ${RELEASE_NAME} charts --set image.tag=${CI_BUILD_REF} -f charts/values/sso/${NAMESPACE}.yaml --namespace=${NAMESPACE}; fi
  environment:
    name: sso-qa
    # url: https://qa.hydra.egnify.io
  only:
    - sso/qa

deploy-uat:
  stage: deploy
  image: arbaz7/gcloud-kubectl-helm:latest
  services:
    - docker:dind
  before_script:
    - mkdir -p /etc/deploy
    - echo ${kube_config} > kube_config
    - base64 -d kube_config > ${KUBECONFIG}
    - echo ${gcloud_auth} > gcloud_auth.base64
    - base64 -d gcloud_auth.base64 > gcloud_auth.json
    # - kubectl config use-context gke_egnify-product_us-central1-a_hydra-federation
    - helm init --client-only
    - gcloud auth activate-service-account --key-file=gcloud_auth.json
    - helm repo update
    - gcloud container clusters get-credentials hydra-federation-dev --zone asia-south1-a --project egnify-product
  script:
    - export NAMESPACE=uat;
    - export RELEASE_NAME=sso-${NAMESPACE}-hydra
    - export DEPLOYS=$(helm ls | grep $RELEASE_NAME | wc -l)
    - if [ ${DEPLOYS}  -eq 0 ]; then helm install --name=${RELEASE_NAME} charts --set image.tag=${CI_BUILD_REF} -f charts/values/${NAMESPACE}.yaml --namespace=${NAMESPACE}; else helm upgrade ${RELEASE_NAME} charts --set image.tag=${CI_BUILD_REF} -f charts/values/${NAMESPACE}.yaml --namespace=${NAMESPACE}; fi
  environment:
    name: uat
    # url: https://qa.hydra.egnify.io
  only:
    - uat

deploy-spica-dev:
  stage: deploy
  image: arbaz7/gcloud-kubectl-helm:latest
  services:
    - docker:dind
  before_script:
    - mkdir -p /etc/deploy
    - echo ${kube_config} > kube_config
    - base64 -d kube_config > ${KUBECONFIG}
    - echo ${gcloud_auth} > gcloud_auth.base64
    - base64 -d gcloud_auth.base64 > gcloud_auth.json
    # - kubectl config use-context gke_egnify-product_us-central1-a_hydra-federation
    - helm init --client-only
    - gcloud auth activate-service-account --key-file=gcloud_auth.json
    - helm repo update
    - gcloud container clusters get-credentials hydra-federation-dev --zone asia-south1-a --project egnify-product
  script:
    - export NAMESPACE=dev;
    - export RELEASE_NAME=sso-${NAMESPACE}-spica
    - export DEPLOYS=$(helm ls | grep $RELEASE_NAME | wc -l)
    - if [ ${DEPLOYS}  -eq 0 ]; then helm install --name=${RELEASE_NAME} charts --set image.tag=${CI_BUILD_REF} -f charts/values/spica/${NAMESPACE}.yaml --namespace=${NAMESPACE}; else helm upgrade ${RELEASE_NAME} charts --set image.tag=${CI_BUILD_REF} -f charts/values/spica/${NAMESPACE}.yaml --namespace=${NAMESPACE}; fi
  environment:
    name: spica-dev
    # url: https://qa.hydra.egnify.io
  only:
    - spica/development

deploy-spica-qa:
  stage: deploy
  image: arbaz7/gcloud-kubectl-helm:latest
  services:
    - docker:dind
  before_script:
    - mkdir -p /etc/deploy
    - echo ${kube_config} > kube_config
    - base64 -d kube_config > ${KUBECONFIG}
    - echo ${gcloud_auth} > gcloud_auth.base64
    - base64 -d gcloud_auth.base64 > gcloud_auth.json
    # - kubectl config use-context gke_egnify-product_us-central1-a_hydra-federation
    - helm init --client-only
    - gcloud auth activate-service-account --key-file=gcloud_auth.json
    - helm repo update
    - gcloud container clusters get-credentials hydra-federation-dev --zone asia-south1-a --project egnify-product
  script:
    - export NAMESPACE=qa;
    - export RELEASE_NAME=sso-${NAMESPACE}-spica
    - export DEPLOYS=$(helm ls | grep $RELEASE_NAME | wc -l)
    - if [ ${DEPLOYS}  -eq 0 ]; then helm install --name=${RELEASE_NAME} charts --set image.tag=${CI_BUILD_REF} -f charts/values/spica/${NAMESPACE}.yaml --namespace=${NAMESPACE}; else helm upgrade ${RELEASE_NAME} charts --set image.tag=${CI_BUILD_REF} -f charts/values/spica/${NAMESPACE}.yaml --namespace=${NAMESPACE}; fi
  environment:
    name: spica-qa
    # url: https://qa.hydra.egnify.io
  only:
    - spica/qa

# pre-production:
#   stage: deploy
#   image: arbaz7/gcloud-kubectl-helm:latest
#   services:
#     - docker:dind
#   before_script:
#     - mkdir -p /etc/deploy
#     - echo ${kube_config} > kube_config
#     - base64 -d kube_config > ${KUBECONFIG}
#     - echo ${gcloud_auth} > gcloud_auth.base64
#     - base64 -d gcloud_auth.base64 > gcloud_auth.json
#     - kubectl config use-context gke_egnify-product_us-central1-a_hydra-federation
#     - helm init --client-only
#     - helm repo update
#     - gcloud auth activate-service-account --key-file=gcloud_auth.json
#     - gcloud container clusters get-credentials hydra-federation --zone us-central1-a --project egnify-product
#   script:
#     - export API_EGNIFY_IO_URL=http://uat-api.hydra.egnify.io
#     - export PORT=3000
#     - export NODE_ENV=production
#     - export MONGODB_URI=mongodb://chinaUser:AkdjsAIYHjk87y23l1m2klRrtyhjnmrti92w33@10.148.0.6:27017/china
#     # - export JWT_SECRET=KAJDK656kllksklfmFGDFGS765ujh765T6GHAJDSjjjkjiursrda
#     # - export MAILJET_API_KEY=a1fb4988b5a359099061d2cb8aebc80d
#     # - export MAILJET_API_SECRETKEY=2fc962b7e3aae82acee17b355fb9de2d
#     # - kubectl config view
#     # - helm upgrade --namespace gitlab-managed-apps ${CI_BUILD_REF_NAME} helm-charts
#     # - helm dep build
#     # - export API_VERSION="$(grep "appVersion" Chart.yaml | cut -d" " -f2)"
#     - export RELEASE_NAME=pre-production
#     - export DEPLOYS=$(helm ls | grep $RELEASE_NAME | wc -l)
#     - if [ ${DEPLOYS}  -eq 0 ]; then helm install --name=${RELEASE_NAME} --set projectEnv.mongodbUri=${MONGODB_URI} --set projectEnv.apiEgnifyIoUrl=${API_EGNIFY_IO_URL} --set image.repository=${CONTAINER_IMAGE_UNTAGGED} --set image.tag=${CI_BUILD_REF} --set ingress.hosts[0]=uat.hydra.egnify.io helm-charts --namespace=uat; else helm upgrade --set projectEnv.mongodbUri=${MONGODB_URI} --set projectEnv.apiEgnifyIoUrl=${API_EGNIFY_IO_URL} --set image.repository=${CONTAINER_IMAGE_UNTAGGED} --set image.tag=${CI_BUILD_REF} --set ingress.hosts[0]=uat.hydra.egnify.io ${RELEASE_NAME} helm-charts --namespace=uat; fi
#   environment:
#     name: UAT
#     url: http://uat.hydra.egnify.io
#   when: manual
#   only:
#     - qa
